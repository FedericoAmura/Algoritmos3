Error subclass: #DatoFaltante	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Object subclass: #Plantilla	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Plantilla methodsFor: 'as yet unclassified' stamp: '95202 4/23/2014 17:47'!procesarPlantilla: unosDatos	"Este es un metodo abstracto para que todas las subclases tengan su metodo propio"	^self subclassResponsibility! !Plantilla subclass: #PlantillaXML	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!PlantillaXML methodsFor: 'as yet unclassified' stamp: '95202 4/17/2014 20:35'!procesarPlantilla: unosContenidos	"Este metodo procesa los contenidos segun la plantilla XML"	|unString|	unString := ByteString new.	unString := '<diapositiva>'.	unosContenidos do: [ :unContenido | unString := (unString, '<texto>',unContenido, '</texto>')].	unString := (unString,'</diapositiva>').	^unString.! !Object subclass: #Presentacion	instanceVariableNames: 'diapositivas transiciones'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Presentacion methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:05'!agregarDiapositiva: unaDiapositiva	"Agrega una diapositiva con la transicion default"	|unaTransicion|	unaTransicion := TransicionDefault new.	self agregarDiapositiva: unaDiapositiva conTransicion: unaTransicion.		! !!Presentacion methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:06'!agregarDiapositiva: unaDiapositiva conTransicion: unaTransicion	"Agrega una diapositiva con la transicion de salida especificada"	((unaDiapositiva == nil) | (unaTransicion == nil)) ifTrue: [ DatoFaltante signal ].	diapositivas add: unaDiapositiva.	unaDiapositiva asignarAPresentacion: self.	transiciones add: unaTransicion.	! !!Presentacion methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 18:46'!contenidoComoString	"Devuelve el contenido de las presentacions como un string"		|unString|	unString := ByteString new.	1 to: (diapositivas size) do: [:n |		unString := (unString,((diapositivas at: n) procesarDiapositiva)).		(n = diapositivas size) ifFalse:  [unString := (unString,((transiciones at: n) procesarTransicionComoString))].	].	^unString.! !!Presentacion methodsFor: 'as yet unclassified' stamp: '95202 4/13/2014 17:37'!initialize	"Inicializa la presentacion"	diapositivas := OrderedCollection new.	transiciones := OrderedCollection new.	! !!Presentacion methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 22:42'!obtenerDiapositivaNro: posicion	"Consigue una referencia a la diapositiva de la posicion indicada"	((posicion <=0) | (posicion > (diapositivas size))) ifTrue: [ NoExisteTalDiapositiva signal ].	^ diapositivas at: posicion.! !!Presentacion methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:00'!sacarDiapositiva: unaDiapositiva	"Saca una diapositiva de la presentacion y su transicion asociada"	|indice|	indice := diapositivas indexOf: unaDiapositiva ifAbsent: [ NoExisteTalDiapositiva signal ].	diapositivas removeAt: indice.	transiciones removeAt: indice.		! !Object subclass: #Transicion	instanceVariableNames: 'textoIdentificativo'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Transicion methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:41'!obtenerTextoIdentificativo	"Devuelve el texto identificativo de la transicion para ser devuelto como string"	^textoIdentificativo.! !!Transicion methodsFor: 'as yet unclassified' stamp: '95202 4/17/2014 20:50'!procesarTransicionComoString	"imprime el string asociado a la transicion correspondiente"	^(' ',self obtenerTextoIdentificativo,'--> ').! !Transicion subclass: #TransicionDefault	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!TransicionDefault methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:42'!initialize	"Inicializa el texto identificativo de una transicion default"	textoIdentificativo := ''.! !Transicion subclass: #TransicionBarridoHorizontal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!TransicionBarridoHorizontal methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:42'!initialize	"Inicializa el texto identificativo de una transicion horizontal"	textoIdentificativo := '--BH'.! !Transicion subclass: #TransicionBarridoVertical	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!TransicionBarridoVertical methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:42'!initialize	"Inicializa el texto identificativo de una transicion vertical"	textoIdentificativo := '--BV'.! !Object subclass: #Diapositiva	instanceVariableNames: 'presentacion plantilla contenido'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:03'!agregarContenido: unContenido	"Agrega un contenido a la diapositiva"	(unContenido == nil) ifTrue: [ DatoFaltante signal ].	contenido add: unContenido.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:11'!asignarAPresentacion: unaPresentacion	"asigna la presentacion madre a la diapositiva"	presentacion := unaPresentacion.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:11'!asociarContenidos: contenidos	"Asocia un OC de contenidos a la diapositiva"	contenido := contenidos copy.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/21/2014 19:36'!clonar	"clona la diapositiva"	| clon |	clon := Diapositiva new.	clon setearPlantilla: (self plantilla).	clon asociarContenidos: (self contenido).	^clon.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/17/2014 18:57'!contenido	"devuelve el contenido de la diapositiva"	^contenido.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/13/2014 18:17'!initialize	"Inicializa la diapositiva"	plantilla := PlantillaDefault new.	contenido := OrderedCollection new.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/17/2014 18:58'!plantilla	"devuelve la plantilla que tiene la diapositiva"	^plantilla.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/17/2014 19:14'!presentacion	"devuelve el contenido de la diapositiva"	^presentacion.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/13/2014 18:58'!procesarDiapositiva	"devuelve la diapositiva procesada segun su plantilla"	^plantilla procesarPlantilla: contenido.! !!Diapositiva methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:04'!setearPlantilla: unaPlantilla	"Asigna el estilo de plantilla de la diapositiva"	(unaPlantilla == nil) ifTrue: [ DatoFaltante signal ].	plantilla := unaPlantilla.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Diapositiva class	instanceVariableNames: 'plantilla'!Error subclass: #NoExisteTalDiapositiva	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Plantilla subclass: #PlantillaDefault	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!PlantillaDefault methodsFor: 'as yet unclassified' stamp: '95202 4/17/2014 20:56'!procesarPlantilla: unosContenidos	"Este metodo procesa los contenidos segun la plantilla default"	|unString|	unString := ByteString new.	unString := 'D['.	unosContenidos do: [ :unContenido | unString := (unString,'Texto[',unContenido,']')].	unString := (unString,']').	^unString.! !Object subclass: #Datos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Error subclass: #ComandoVacio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Plantilla subclass: #PlantillaMayusculas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!PlantillaMayusculas methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:03'!procesarPlantilla: unosContenidos	"Este metodo procesa los contenidos segun la plantilla mayusculas"	|unString|	unString := ByteString new.	unString := 'D['.	unosContenidos do: [ :unContenido | unString := (unString, 'Texto[',unContenido asUppercase,']')].	unString := (unString,']').	^unString.! !Object subclass: #Comandos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!Datos subclass: #Texto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Texto class	instanceVariableNames: ''!!Texto class methodsFor: 'as yet unclassified' stamp: '95202 4/19/2014 19:01'!conString: unString	"Crea un dato de tipo texto como un bytestring"	| unTexto |	unTexto := ByteString new.	unTexto := unString.	^unTexto.	! !Comandos subclass: #ComandoCopiar	instanceVariableNames: 'diapositiva'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!ComandoCopiar methodsFor: 'as yet unclassified' stamp: '95202 4/21/2014 19:43'!copiar: unaDiapositiva	"copia la diapositiva indicada en el portapapeles"	diapositiva := unaDiapositiva clonar.! !!ComandoCopiar methodsFor: 'as yet unclassified' stamp: '95202 4/23/2014 16:33'!pegarAlFinalDe: unaPresentacion "pega la diapositiva contenida al final de la presentacion indicada "		(unaPresentacion == nil) ifTrue: [ DatoFaltante signal ].	(diapositiva == nil) ifTrue: [ComandoVacio signal].	unaPresentacion agregarDiapositiva: diapositiva.! !ComandoCopiar subclass: #ComandoCortar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!ComandoCortar methodsFor: 'as yet unclassified' stamp: '95202 4/23/2014 20:39'!cortar: unaDiapositiva	"saca una diapositiva de una presentacion y la guarda"	diapositiva := unaDiapositiva clonar.	diapositiva asignarAPresentacion: nil.	(unaDiapositiva presentacion) sacarDiapositiva: unaDiapositiva.	! !
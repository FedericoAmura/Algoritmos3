TestCase subclass: #TestsTP1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!TestsTP1 methodsFor: 'Pruebas Diapositiva' stamp: '95202 4/19/2014 19:10'!testAgregarContenidoNilADiapositiva	"Verifica que no se pueda agregar un contenido nil a una diapositiva"	| diapositiva |	diapositiva := Diapositiva new.	self should: [ diapositiva agregarContenido: nil. ] raise: DatoFaltante.! !!TestsTP1 methodsFor: 'Pruebas Diapositiva' stamp: '95202 4/19/2014 19:12'!testAsignarNingunaPlantillaADiapositiva	"Verifica que no se pueda agregar una plantilla nil a una diapositiva"	| diapositiva |	diapositiva := Diapositiva new.	self should: [ diapositiva setearPlantilla: nil. ] raise: DatoFaltante.! !!TestsTP1 methodsFor: 'Pruebas Diapositiva' stamp: '95202 4/23/2014 16:11'!testClonarDiapositiva	"Prueba que se cree una diapositiva clon y que no sea la misma"	| diapo1 diapo2 |	diapo1 := Diapositiva new.	diapo2 := diapo1 clonar.	self deny: (diapo1 = diapo2).	self deny: (diapo1 == diapo2).	self assert: (diapo1 procesarDiapositiva = diapo2 procesarDiapositiva).	diapo1 agregarContenido: (Texto conString: 'prueba').	self deny: (diapo1 procesarDiapositiva = diapo2 procesarDiapositiva).		! !!TestsTP1 methodsFor: 'Pruebas Diapositiva' stamp: '95202 4/19/2014 18:32'!testComandoVacio	"Prueba que no se pueda utilizar el comando copiar sin ninguna diapositiva en el comando"	| comando presentacion |	comando := ComandoCopiar new.	presentacion := Presentacion new.			self should: [ comando pegarAlFinalDe: presentacion ] raise: ComandoVacio.	! !!TestsTP1 methodsFor: 'Pruebas Diapositiva' stamp: '95202 4/19/2014 21:23'!testCrearDiapositivaMutanteConDatos	"Crea una diapositiva con datos y verifica el cambio de sus datos segun su plantilla"	| diapositiva plantilla |	diapositiva := Diapositiva new.	diapositiva agregarContenido: (Texto conString: 'Hola Mundo').	diapositiva agregarContenido: (Texto conString: 'Chau Mundo').	self assert: ((diapositiva procesarDiapositiva) = 'D[Texto[Hola Mundo]Texto[Chau Mundo]]').	plantilla := PlantillaDefault new.	diapositiva setearPlantilla: plantilla.	self assert: ((diapositiva procesarDiapositiva) = 'D[Texto[Hola Mundo]Texto[Chau Mundo]]').	plantilla := PlantillaMayusculas new.	diapositiva setearPlantilla: plantilla.	self assert: ((diapositiva procesarDiapositiva) = 'D[Texto[HOLA MUNDO]Texto[CHAU MUNDO]]').	plantilla := PlantillaXML new.	diapositiva setearPlantilla: plantilla.	self assert: ((diapositiva procesarDiapositiva) = '<diapositiva><texto>Hola Mundo</texto><texto>Chau Mundo</texto></diapositiva>').! !!TestsTP1 methodsFor: 'Pruebas Diapositiva' stamp: '95202 4/19/2014 20:52'!testCrearDiapositivaMutanteVacia	"Crea una diapositiva y verifica su formato segun su plantilla"	| diapositiva plantilla |	diapositiva := Diapositiva new.	self assert: ((diapositiva procesarDiapositiva) = 'D[]').	plantilla := PlantillaDefault new.	diapositiva setearPlantilla: plantilla.	self assert: ((diapositiva procesarDiapositiva) = 'D[]').	plantilla := PlantillaMayusculas new.	diapositiva setearPlantilla: plantilla.	self assert: ((diapositiva procesarDiapositiva) = 'D[]').	plantilla := PlantillaXML new.	diapositiva setearPlantilla: plantilla.	self assert: ((diapositiva procesarDiapositiva) = '<diapositiva></diapositiva>').! !!TestsTP1 methodsFor: 'Pruebas Comandos' stamp: '95202 4/19/2014 19:27'!testNoPoderPegarUnaDiapositivaInexistente	"Verifica que el metodo para pegar no pueda pegar si no tiene una diapositiva cargada o si no se le especifica la presentacion para pegar"	| comando presentacion |	comando := ComandoCortar new.	presentacion := Presentacion new.	self should: [ comando pegarAlFinalDe: nil ] raise: DatoFaltante.	self should: [ comando pegarAlFinalDe: presentacion ] raise: ComandoVacio.! !!TestsTP1 methodsFor: 'Pruebas Presentacion' stamp: '95202 4/19/2014 22:41'!testAgregarYQuitarDiapositivasAUnaPresentacion	"Verifica que se agreguen y quiten bien las diapositivas con sus transiciones asociadas"	| presentacion diapo1 diapo2 diapo3 diapo4 transicion1 transicion2 |	presentacion := Presentacion new.	diapo1 := Diapositiva new.	diapo2 := Diapositiva new.	diapo3 := Diapositiva new.	diapo4 := Diapositiva new.	diapo1 agregarContenido: (Texto conString: 'uno').	diapo2 agregarContenido: (Texto conString: 'dos').	diapo3 agregarContenido: (Texto conString: 'tres').	diapo4 agregarContenido: (Texto conString: 'cuatro').	transicion1 := TransicionBarridoVertical new.	transicion2 := TransicionBarridoHorizontal new.	presentacion agregarDiapositiva: diapo1 conTransicion: transicion1.	self assert: ((presentacion contenidoComoString) = 'D[Texto[uno]]').	presentacion agregarDiapositiva: diapo2 conTransicion: transicion2.	presentacion agregarDiapositiva: diapo3.	presentacion agregarDiapositiva: diapo4.	self assert: ((presentacion contenidoComoString) = 'D[Texto[uno]] --BV--> D[Texto[dos]] --BH--> D[Texto[tres]] --> D[Texto[cuatro]]').	presentacion sacarDiapositiva: diapo2.	self assert: ((presentacion contenidoComoString) = 'D[Texto[uno]] --BV--> D[Texto[tres]] --> D[Texto[cuatro]]').	presentacion sacarDiapositiva: diapo3.	self assert: ((presentacion contenidoComoString) = 'D[Texto[uno]] --BV--> D[Texto[cuatro]]').	presentacion sacarDiapositiva: diapo4.	self assert: ((presentacion contenidoComoString) = 'D[Texto[uno]]').	presentacion sacarDiapositiva: diapo1.	self assert: ((presentacion contenidoComoString) = '').	! !!TestsTP1 methodsFor: 'Pruebas Presentacion' stamp: '95202 4/19/2014 22:17'!testCrearUnaPresentacionYAsignarleDiapositivasConTransicion	"Verifica que se cree bien la presentacion y guarde correctamente las diapositivas con las transiciones como corresponde"	| presentacion diapo1 diapo2 diapo3 transicion1 transicion2 |	presentacion := Presentacion new.	diapo1 := Diapositiva new.	diapo2 := Diapositiva new.	diapo3 := Diapositiva new.	transicion1 := TransicionBarridoVertical new.	transicion2 := TransicionBarridoHorizontal new.	presentacion agregarDiapositiva: diapo1 conTransicion: transicion1.	presentacion agregarDiapositiva: diapo2.	presentacion agregarDiapositiva: diapo3 conTransicion: transicion2.	self assert: ((presentacion contenidoComoString) = 'D[] --BV--> D[] --> D[]').			! !!TestsTP1 methodsFor: 'Pruebas Presentacion' stamp: '95202 4/19/2014 19:36'!testNoPoderAgregarCosasNilAPresentacion	"Verifica que el metodo para agregar diapositivas a una presentacion no pueda hacerlo sin una diapositiva o especificando una transicion nil"	| presentacion diapositiva |	presentacion := Presentacion new.	diapositiva := Diapositiva new.	self should: [ presentacion agregarDiapositiva: nil ] raise: DatoFaltante.	self should: [ presentacion agregarDiapositiva: nil conTransicion: nil ] raise: DatoFaltante.	self should: [ presentacion agregarDiapositiva: diapositiva conTransicion: nil ] raise: DatoFaltante.! !!TestsTP1 methodsFor: 'Pruebas Presentacion' stamp: '95202 4/19/2014 19:39'!testNoPoderObtenerUnaDiapositivaEnPosicionInvalida	"Verifica que el metodo para obtener diapositivas de una presentacion responda si se le pide una posicion invalida"	| presentacion |	presentacion := Presentacion new.	self should: [ presentacion obtenerDiapositivaNro: -1 ] raise: NoExisteTalDiapositiva.	self should: [ presentacion obtenerDiapositivaNro: 1 ] raise: NoExisteTalDiapositiva.! !!TestsTP1 methodsFor: 'Pruebas Presentacion' stamp: '95202 4/19/2014 19:40'!testNoPoderSacarUnaDiapositivaEnPosicionInvalida	"Verifica que el metodo para obtener diapositivas de una presentacion responda si se le pide una posicion invalida"	| presentacion |	presentacion := Presentacion new.	self should: [ presentacion sacarDiapositiva: -1 ] raise: NoExisteTalDiapositiva.	self should: [ presentacion sacarDiapositiva: 1 ] raise: NoExisteTalDiapositiva.! !!TestsTP1 methodsFor: 'Pruebas Presentacion' stamp: '95202 4/20/2014 16:49'!testObtenerDiapositivaDentroDePresentacion	"prueba que el metodo obtenerDiapositivaNro funcione correctamente"	| presentacion diapo1 diapo2 diapo3 otraDiapo |	presentacion := Presentacion new.	diapo1 := Diapositiva new.	diapo2 := Diapositiva new.	diapo3 := Diapositiva new.	presentacion agregarDiapositiva: diapo1.	presentacion agregarDiapositiva: diapo2.	presentacion agregarDiapositiva: diapo3.	otraDiapo := presentacion obtenerDiapositivaNro: 1.	self assert: ( otraDiapo == diapo1 ).	otraDiapo := presentacion obtenerDiapositivaNro: 3.	self assert: ( otraDiapo == diapo3 ).	self should: [ presentacion obtenerDiapositivaNro: 0 ] raise: NoExisteTalDiapositiva.	self should: [ presentacion obtenerDiapositivaNro: -1 ] raise: NoExisteTalDiapositiva.	self should: [ presentacion obtenerDiapositivaNro: 4 ] raise: NoExisteTalDiapositiva.		! !!TestsTP1 methodsFor: 'Otras Pruebas' stamp: '95202 4/19/2014 18:37'!testCreacionDeDatosDelTipoTexto	"Prueba que el dato que se crea sea un bytestring y almacene correctamente"	| texto |	texto := Texto conString: 'Texto de prueba'.	self assert: (texto =  'Texto de prueba').! !